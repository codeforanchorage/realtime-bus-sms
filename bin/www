#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('myapp:server');
var http = require('http');
var https = require('https');
var fs = require('fs');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '8080');
//app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port, '0.0.0.0');
server.on('error', onError);
server.on('listening', onListening);


/**
* Setup HTTPS server with self-signed certs
* Self-signed Certs won't be trusted by browsers
* To Generate Keys (on OS X/Linux)
* openssl genrsa -out localhost.key 2048
* openssl req -new -x509 -key localhost.key -out localhost.cert -days 3650 -subj /CN=localhost
**/
if (app.get('env') == "development") {
  console.log("Starting https server on port 8043")
  var ssl_options = {
      key: fs.readFileSync( 'ssl/localhost.key' ),
      cert: fs.readFileSync( 'ssl/localhost.cert' ),
      requestCert: false,
      rejectUnauthorized: false
  };
  var ssl_server = https.createServer(ssl_options, app).listen(8043);
  ssl_server.on('error', onError);
  ssl_server.on('listening', onListening);
}
/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

/**
* Periodically check for new GTFS File from Muni
*/
var getGTFSFile = require("../lib/gtfs").getGTFSFile
var CronJob = require('cron').CronJob;
var cron_job = new CronJob('0 01 02 * * *', getGTFSFile, null, true, 'America/Anchorage'); // check for new GTFS file every day at 2:01 am Alaska Time
